% Graph edges with cost: edge(Node1, Node2, Cost).
edge(a, b, 1).
edge(a, c, 4).
edge(b, d, 1).
edge(c, d, 1).

best_first(Start, Goal, Path) :-
    best_first([[Start]], Goal, Path).

best_first([[Goal|Rest]|_], Goal, Path) :-
    reverse([Goal|Rest], Path).

best_first([Path|Paths], Goal, Result) :-
    Path = [Current|_],
    findall([Next,Current|Path],
            (edge(Current, Next, _), \+ member(Next, Path)),
            NewPaths),
    append(Paths, NewPaths, Paths1),
    best_first(Paths1, Goal, Result).
