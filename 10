import heapq

def heuristic(a,b):
    return abs(a[0]-b[0]) + abs(a[1]-b[1])

def astar(start, goal, neighbors):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {start:0}
    while open_set:
        _, current = heapq.heappop(open_set)
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]
        for neighbor in neighbors(current):
            tentative_g = g_score[current] + 1
            if neighbor not in g_score or tentative_g < g_score[neighbor]:
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score, neighbor))
                came_from[neighbor] = current
    return None

def neighbors(pos):
    x,y = pos
    for nx,ny in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:
        if 0 <= nx <5 and 0 <= ny <5:
            yield (nx,ny)

start = (0,0)
goal = (4,4)
path = astar(start, goal, neighbors)
print(path)
