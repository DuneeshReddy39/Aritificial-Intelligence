
from collections import deque

def water_jug_bfs(jug1, jug2, target):
    visited = set()
    queue = deque()
    queue.append((0, 0))  # start state (jug1, jug2)
    visited.add((0, 0))
    parent = { (0, 0): None }

    while queue:
        x, y = queue.popleft()
        if x == target or y == target:
            path = []
            while (x, y) is not None:
                path.append((x, y))
                (x, y) = parent[(x, y)]
            return path[::-1]

        states = set()

        # Fill Jug1
        states.add((jug1, y))
        # Fill Jug2
        states.add((x, jug2))
        # Empty Jug1
        states.add((0, y))
        # Empty Jug2
        states.add((x, 0))
        # Pour Jug1 -> Jug2
        pour = min(x, jug2 - y)
        states.add((x - pour, y + pour))
        # Pour Jug2 -> Jug1
        pour = min(y, jug1 - x)
        states.add((x + pour, y - pour))

        for state in states:
            if state not in visited:
                visited.add(state)
                queue.append(state)
                parent[state] = (x, y)
    return None

# Example usage
jug1_capacity = 4
jug2_capacity = 3
target_amount = 2
solution = water_jug_bfs(jug1_capacity, jug2_capacity, target_amount)
if solution:
    for step in solution:
        print(f"Jug1: {step[0]}, Jug2: {step[1]}")
else:
    print("No solution found.")
